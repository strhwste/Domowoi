{"version":3,"file":"rule-engine.js","sourceRoot":"","sources":["../../src/rule-engine.ts"],"names":[],"mappings":"AAOA,MAAM,OAAO,UAAU;IAGrB,YAAY,KAAa;QAFjB,UAAK,GAAW,EAAE,CAAC;QAGzB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,OAAO,CAAC,GAAG,CAAC,+BAA+B,EAAE,KAAK,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;IACtE,CAAC;IAED,QAAQ,CAAC,OAA4B;QACnC,+BAA+B;QAC/B,OAAO,CAAC,GAAG,CAAC,6CAA6C,EAAE,OAAO,CAAC,CAAC;QAEpE,MAAM,OAAO,GAAU,EAAE,CAAC;QAC1B,KAAK,MAAM,IAAI,IAAI,IAAI,CAAC,KAAK,EAAE,CAAC;YAC9B,IAAI,GAAG,GAAG,KAAK,CAAC;YAChB,IAAI,CAAC;gBACH,uCAAuC;gBACvC,GAAG,GAAG,QAAQ,CAAC,GAAG,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,WAAW,IAAI,CAAC,SAAS,IAAI,CAAC,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC;gBAClG,OAAO,CAAC,GAAG,CAAC,sBAAsB,IAAI,CAAC,EAAE,IAAI,IAAI,CAAC,WAAW,MAAM,IAAI,CAAC,SAAS,QAAQ,GAAG,EAAE,CAAC,CAAC;YAClG,CAAC;YAAC,OAAO,CAAC,EAAE,CAAC;gBACX,OAAO,CAAC,IAAI,CAAC,uCAAuC,IAAI,CAAC,EAAE,IAAI,IAAI,CAAC,WAAW,IAAI,EAAE,CAAC,CAAC,CAAC;gBACxF,SAAS;YACX,CAAC;YACD,IAAI,GAAG,EAAE,CAAC;gBACR,OAAO,CAAC,IAAI,CAAC,EAAE,WAAW,EAAE,IAAI,CAAC,WAAW,EAAE,QAAQ,EAAE,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;YAC3E,CAAC;QACH,CAAC;QAED,OAAO,CAAC,GAAG,CAAC,mCAAmC,EAAE,OAAO,CAAC,MAAM,EAAE,eAAe,CAAC,CAAC;QAClF,OAAO,OAAO,CAAC;IACjB,CAAC;CACF","sourcesContent":["export type Rule = {\n  id?: string;\n  condition: string; // Ausdruck als String\n  message_key: string;\n  priority: 'ok'|'info'|'warn'|'alert';\n};\n\nexport class RuleEngine {\n  private rules: Rule[] = [];\n\n  constructor(rules: Rule[]) {\n    this.rules = rules;\n    console.log('[RuleEngine] Initialized with', rules.length, 'rules');\n  }\n\n  evaluate(context: Record<string, any>): {message_key: string; priority: string}[] {\n    // Debug: log available context\n    console.log('[RuleEngine] Evaluating rules with context:', context);\n    \n    const results: any[] = [];\n    for (const rule of this.rules) {\n      let hit = false;\n      try {\n        // eslint-disable-next-line no-new-func\n        hit = Function(...Object.keys(context), `return (${rule.condition});`)(...Object.values(context));\n        console.log(`[RuleEngine] Rule '${rule.id || rule.message_key}' (${rule.condition}) => ${hit}`);\n      } catch (e) {\n        console.warn(`[RuleEngine] Error evaluating rule '${rule.id || rule.message_key}':`, e);\n        continue;\n      }\n      if (hit) {\n        results.push({ message_key: rule.message_key, priority: rule.priority });\n      }\n    }\n    \n    console.log('[RuleEngine] Evaluation complete,', results.length, 'rules matched');\n    return results;\n  }\n}"]}