{"version":3,"file":"hausgeist-card-editor.js","sourceRoot":"","sources":["../../src/hausgeist-card-editor.ts"],"names":[],"mappings":"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","sourcesContent":["import { LitElement, html } from 'lit';\nimport { property, customElement, state } from 'lit/decorators.js';\nimport { SENSOR_KEYWORDS } from './sensor-keywords';\nimport '@material/mwc-select';\nimport '@material/mwc-list/mwc-list-item';\nimport './ha-entity-combo-box'; // Custom element for entity selection (assumed available)\n\n@customElement('hausgeist-card-editor')\nexport class HausgeistCardEditor extends LitElement {\n  @property({ type: Object }) config: { \n    debug?: boolean, \n    overrides?: Record<string, Record<string, string>>, \n    areas?: Array<{ area_id: string; name: string; enabled?: boolean }>, \n    auto?: Record<string, Record<string, string>>,\n    weather_entity?: string,\n    default_target?: number,\n    default_target_entity?: string // <-- hinzugefügt\n  } = {};\n  private _hass: any = undefined;\n  @state() testValues: { [key: string]: any } = {};\n  @state() rulesJson = '';\n  @state() notify = false;\n  @state() highThreshold = 2000;\n  private _lastAreas: Array<{ area_id: string; name: string; enabled?: boolean }> = [];\n\n  private _autodetect(areaId: string, type: string): string | undefined {\n    const states = Object.values(this.hass?.states || {});\n    // 1. device_class\n    let s = states.find((st: any) => st.attributes?.area_id === areaId && st.attributes?.device_class === type) as any;\n    if (s && s.entity_id) return s.entity_id;\n    \n\n    // 2. keywords from centralized list\n    const kw = SENSOR_KEYWORDS[type] || [type];\n    s = states.find((st: any) => st.attributes?.area_id === areaId && kw.some(k => \n      st.entity_id.toLowerCase().includes(k) || \n      (st.attributes.friendly_name||'').toLowerCase().includes(k)\n    )) as any;\n\n    if (s && s.entity_id) return s.entity_id;\n    \n    // 3. fallback: area name\n    const areaName = (this.hass?.areas && this.hass.areas[areaId]?.name?.toLowerCase()) || areaId.toLowerCase();\n    s = states.find((st: any) => (\n      st.entity_id.toLowerCase().includes(areaName) || \n      (st.attributes.friendly_name||'').toLowerCase().includes(areaName)\n    ) && kw.some(k => st.entity_id.toLowerCase().includes(k))) as any;\n    return s && s.entity_id ? s.entity_id : undefined;\n  }\n\n  private _renderWeatherInfo() {\n    const selectedWeather = this.hass?.states?.[this.config.weather_entity || 'weather.home'];\n    if (!selectedWeather) return '';\n    const temp = selectedWeather.attributes?.temperature;\n    const tempUnit = selectedWeather.attributes?.temperature_unit || selectedWeather.attributes?.unit_of_measurement || 'unknown unit';\n    let rain = selectedWeather.attributes?.precipitation;\n    let rainUnit = selectedWeather.attributes?.precipitation_unit || 'mm';\n    if (rain === undefined && Array.isArray(selectedWeather.attributes?.forecast) && selectedWeather.attributes.forecast.length > 0) {\n      rain = selectedWeather.attributes.forecast[0].precipitation ?? selectedWeather.attributes.forecast[0].rain;\n      rainUnit = selectedWeather.attributes.forecast[0].precipitation_unit || rainUnit;\n    }\n    let rainProb = selectedWeather.attributes?.precipitation_probability;\n    if (rainProb === undefined && selectedWeather.attributes?.forecast && Array.isArray(selectedWeather.attributes.forecast) && selectedWeather.attributes.forecast.length > 0) {\n      rainProb = selectedWeather.attributes.forecast[0].precipitation_probability;\n    }\n    // Zusätzliche Wetterinfos für Logik und Anzeige\n    const humidity = selectedWeather.attributes?.humidity;\n    const windSpeed = selectedWeather.attributes?.wind_speed;\n    const windBearing = selectedWeather.attributes?.wind_bearing;\n    const pressure = selectedWeather.attributes?.pressure;\n    const condition = selectedWeather.state;\n    const cloudCoverage = selectedWeather.attributes?.cloud_coverage;\n    const visibility = selectedWeather.attributes?.visibility;\n    return html`\n      <div class=\"weather-info\">\n        <b>Aktuelle Wetterdaten:</b><br />\n        Temperatur: ${temp !== undefined ? `${temp} ${tempUnit}` : 'n/a'}<br />\n        Luftfeuchtigkeit: ${humidity !== undefined ? `${humidity}%` : 'n/a'}<br />\n        Regen: ${rain !== undefined ? `${rain} ${rainUnit}` : 'n/a'}<br />\n        ${rainProb !== undefined ? html`Regenwahrscheinlichkeit: ${rainProb}%<br />` : ''}\n        Luftdruck: ${pressure !== undefined ? `${pressure} hPa` : 'n/a'}<br />\n        Wind: ${windSpeed !== undefined ? `${windSpeed} km/h` : 'n/a'}${windBearing !== undefined ? ` (${windBearing}°)` : ''}<br />\n        Bewölkung: ${cloudCoverage !== undefined ? `${cloudCoverage}%` : 'n/a'}<br />\n        Sichtweite: ${visibility !== undefined ? `${visibility} m` : 'n/a'}<br />\n        Zustand: ${condition || 'n/a'}\n      </div>\n    `;\n  }\n\n  setConfig(config: any) {\n    this.config = config;\n  }\n  // Getter and setter for hass\n  get hass() {\n    return this._hass;\n  }\n  set hass(hass: any) {\n    this._hass = hass;\n    this.requestUpdate();\n  }\n\n  // Use arrow function to auto-bind 'this'\n  _onDebugChange = (e: Event) => {\n    const debug = (e.target as HTMLInputElement).checked;\n    this.config = { ...this.config, debug };\n    this._configChanged();\n  };\n  // Handle sensor selection change for a specific area and type\n  private _onAreaSensorChange(areaId: string, type: string, value: string) {\n    const entity_id = value;\n    const overrides = { ...(this.config.overrides || {}) };\n    overrides[areaId] = { ...(overrides[areaId] || {}), [type]: entity_id };\n    this.config = { ...this.config, overrides };\n    this._configChanged();\n  }\n\n  // Dispatch a custom event to notify that the config has changed\n  _configChanged() {\n    // Always include the current areas in the config\n    if (this._lastAreas && Array.isArray(this._lastAreas)) {\n      // Build auto-mapping: auto[area_id][type] = entity_id (wie im Editor angezeigt)\n      const auto: Record<string, Record<string, string>> = {};\n      const areas = this._lastAreas;\n      const sensorTypes = [\n        'temperature', 'humidity', 'co2', 'window', 'door', 'curtain', 'blind', 'heating', 'target'\n      ];\n\n      // Debug: Show all states with their area_ids\n      if (this.config.debug) {\n        const states = Object.values(this.hass?.states || {});\n        console.log('All states with area_ids:', \n          states.filter((s: any) => s.attributes?.area_id)\n            .map((s: any) => `${s.entity_id} (${s.attributes.area_id})`)\n        );\n      }\n\n      for (const area of areas) {\n        auto[area.area_id] = {};\n        for (const type of sensorTypes) {\n          const autoId = this._autodetect(area.area_id, type);\n          if (autoId) auto[area.area_id][type] = autoId;\n          // Debug: Log each detected sensor\n          if (this.config.debug) {\n            console.log(`Auto-detected for ${area.area_id} - ${type}: ${autoId || 'none'}`);\n          }\n        }\n      }\n\n      // Debug: Log the final auto config\n      if (this.config.debug) {\n        console.log('Final auto config:', JSON.stringify(auto, null, 2));\n      }\n\n      this.config = { ...this.config, areas: this._lastAreas, auto };\n    }\n    const event = new CustomEvent('config-changed', {\n      detail: { config: this.config },\n      bubbles: true,\n      composed: true,\n    });\n    this.dispatchEvent(event);\n  }\n\n  // Handle test value changes for a specific area and type\n  handleTestValueChange(areaId: string, type: string, e: any) {\n    const value = e.target.value;\n    this.testValues = { ...this.testValues, [areaId + '_' + type]: value };\n    this.requestUpdate();\n  }\n\n  // Handle changes in the rules JSON text area\n  handleRulesChange(e: any) {\n    this.rulesJson = e.target.value;\n    this._configChanged();\n  }\n\n  // Handle changes in the notification checkbox\n  handleNotifyChange(e: any) {\n    this.notify = e.target.checked;\n    this._configChanged();\n  }\n\n  // Handle changes in the high threshold input\n  handleThresholdChange(e: any) {\n    this.highThreshold = Number(e.target.value);\n    this._configChanged();\n  }\n\n  // Handle area enable/disable\n  private _onAreaEnabledChange(areaId: string, e: Event) {\n    const checked = (e.target as HTMLInputElement).checked;\n    const areas = [...(this.config.areas || this._lastAreas.map(a => ({ ...a })))];\n    const areaIndex = areas.findIndex(a => a.area_id === areaId);\n    if (areaIndex >= 0) {\n      areas[areaIndex] = { ...areas[areaIndex], enabled: checked };\n    } else {\n      areas.push({ area_id: areaId, name: areaId, enabled: checked });\n    }\n    this.config = { ...this.config, areas };\n    this._configChanged();\n  }\n\n  // Render the editor UI\n  render() {\n    const hass = this.hass;\n    // Find all Weather Entities\n    const weatherEntities = Object.entries(hass?.states || {})\n      .filter(([entity_id, state]: [string, any]) => entity_id.startsWith('weather.'))\n      .map(([entity_id, state]: [string, any]) => ({\n        entity_id,\n        name: state.attributes?.friendly_name || entity_id\n      }));\n    \n    const areas: Array<{ area_id: string; name: string }> = hass?.areas\n      ? Object.values(hass.areas)\n      : Array.from(new Set(Object.values(hass?.states || {}).map((e: any) => e.attributes?.area_id).filter(Boolean))).map((area_id: string) => ({ area_id, name: area_id }));\n    \n    this._lastAreas = areas;\n    const states = Object.values(hass?.states || {});\n\n    // Nur die Sensoren die wir pro Raum brauchen\n    const requiredSensorTypes = [\n      'temperature',    // Raumtemperatur\n      'humidity',       // Luftfeuchtigkeit\n      'co2',           // CO2-Gehalt\n      'window',        // Fenster-Status\n      'door',          // Tür-Status\n      'curtain',       // Vorhang-Status\n      'blind',         // Rolladen-Status\n      'heating',       // Heizungs-Status (an/aus)\n      'heating_level', // Heizungs-Level (0-100%)\n      'target',        // Zieltemperatur\n      'occupancy'      // Anwesenheit\n    ];\n\n    const missingSensorsPerArea = areas.map(area => {\n      const missing = requiredSensorTypes.filter(type => {\n        const found = states.some((e: any) => e.attributes?.area_id === area.area_id && (\n          type === 'heating' || type === 'heating_level'\n            ? ['heating', 'heizung', 'thermostat', 'climate'].some(k => e.entity_id.toLowerCase().includes(k))\n            : e.attributes?.device_class === type || (e.entity_id.toLowerCase().includes(type))\n        ));\n        return !found;\n      });\n      return { area, missing };\n    });\n\n    // Styles einbinden\n    return html`\n      <style>\n      .card-config {\n        padding: 1em;\n      }\n      hr { margin: 1em 0; border: none; border-top: 1px solid #ddd; }\n      mwc-select, select { min-width: 200px; }\n      li { margin: 0.2em 0; }\n      .sensor-row {\n        display: flex;\n        align-items: center;\n        gap: 0.5em;\n        margin-bottom: 0.5em;\n      }\n      .target-row {\n        margin-bottom: 1em;\n      }\n      .sensor-label {\n        min-width: 120px;\n        font-weight: bold;\n      }\n      .sensor-select {\n        flex-grow: 1;\n      }\n      .help-text {\n        color: #666;\n        font-size: 0.9em;\n        margin-top: 0.3em;\n      }\n      .weather-info {\n        margin-top: 0.5em;\n        font-size: 0.95em;\n        color: #333;\n      }\n      </style>\n      <div class=\"card-config\">\n      <!-- Debug Mode -->\n      <label>\n        <input type=\"checkbox\" .checked=${this.config.debug ?? false} @change=${this._onDebugChange} />\n        Debug mode\n      </label>\n\n      <!-- Weather Entity Selection -->\n      <div style=\"margin-top:1em;\">\n        <b>Weather Entity:</b>\n        <ha-entity-combo-box\n          .hass=${this.hass}\n          .value=${this.config.weather_entity || 'weather.home'}\n          .includeDomains=${['weather']}\n          @value-changed=${(e: CustomEvent) => {\n            const value = e.detail.value;\n            if (value && value !== this.config.weather_entity) {\n              this.config = {\n                ...this.config,\n                weather_entity: value\n              };\n              const event = new CustomEvent('config-changed', {\n                detail: { config: this.config },\n                bubbles: true,\n                composed: true,\n              });\n              this.dispatchEvent(event);\n            }\n          }}\n        ></ha-entity-combo-box>\n        ${this._renderWeatherInfo()}\n      </div>\n\n      <!-- Default Target Temperature -->\n      <div style=\"margin-top:1em;\">\n        <b>Default Target Temperature:</b>\n        <ha-entity-combo-box\n          .hass=${this.hass}\n          .value=${this.config.default_target_entity || ''}\n          .includeDomains=${['input_number','sensor','number']}\n          @value-changed=${(e: CustomEvent) => {\n            const value = e.detail.value;\n            this.config = {\n              ...this.config,\n              default_target_entity: value\n            };\n            this._configChanged();\n          }}\n        ></ha-entity-combo-box>\n        <div class=\"help-text\">\n          Wählen Sie einen Sensor oder Helper für die Standard-Solltemperatur aus.<br />\n          Wenn leer, wird der Wert unten verwendet:\n        </div>\n        <input \n          type=\"number\" \n          min=\"15\" \n          max=\"30\" \n          step=\"0.5\"\n          .value=${this.config.default_target || \"21\"} \n          @change=${(e: Event) => {\n            this.config = {\n              ...this.config,\n              default_target: Number((e.target as HTMLInputElement).value)\n            };\n            this._configChanged();\n          }}\n        />°C\n      </div>\n\n      <hr />\n      <b>Areas and Sensors:</b>\n      ${areas.map(area => {\n        const isEnabled = this.config.areas?.find(a => a.area_id === area.area_id)?.enabled !== false;\n        // Zieltemperatur (target) zuerst anzeigen\n        const sensorTypesOrdered = [\n          'target',\n          ...requiredSensorTypes.filter(t => t !== 'target')\n        ];\n        return html`\n        <div class=\"${isEnabled ? '' : 'disabled-area'}\">\n        <div class=\"area-header\">\n          <input \n          type=\"checkbox\" \n          .checked=${isEnabled} \n          @change=${(e: Event) => this._onAreaEnabledChange(area.area_id, e)}\n          />\n          <b>${area.name || area.area_id}</b>\n        </div>\n        <ul>\n          ${sensorTypesOrdered.map(type => {\n          const areaSensors = states.filter((e: any) => e.attributes?.area_id === area.area_id);\n          \n          // 1. Direkte Übereinstimmung durch device_class\n          const matchingByClass = areaSensors.filter((e: any) => \n            e.attributes?.device_class === type ||\n            (type === 'occupancy' && e.attributes?.device_class === 'motion') ||\n            (type === 'heating' && e.attributes?.device_class === 'climate')\n          );\n\n          // 2. Übereinstimmung durch Keywords aus sensor-keywords.ts\n          const keywords = SENSOR_KEYWORDS[type] || [type];\n          const matchingByKeyword = states.filter((e: any) => {\n            // Entity ID oder friendly_name enthält eines der Keywords\n            const nameMatch = keywords.some(k => \n              e.entity_id.toLowerCase().includes(k.toLowerCase()) || \n              (e.attributes?.friendly_name || '').toLowerCase().includes(k.toLowerCase())\n            );\n\n            // Spezielle Behandlung für bestimmte Typen\n            const specialMatch = \n              // Heizung kann auch climate.* oder thermostat.* sein\n              (type === 'heating' && (e.entity_id.startsWith('climate.') || e.entity_id.includes('thermostat'))) ||\n              // CO2 kann auch als air_quality mit co2 Messung erscheinen\n              (type === 'co2' && e.attributes?.device_class === 'carbon_dioxide') ||\n              // Anwesenheit kann auch durch motion oder occupancy Sensoren erkannt werden\n              (type === 'occupancy' && (\n                e.attributes?.device_class === 'motion' ||\n                e.attributes?.device_class === 'occupancy' ||\n                e.entity_id.includes('motion') ||\n                e.entity_id.includes('presence')\n              ));\n\n            // Bereichszuordnung prüfen\n            const areaMatch = \n              e.attributes?.area_id === area.area_id || // Direkte Area ID\n              (e.attributes?.device_id && this.hass?.devices?.[e.attributes.device_id]?.area_id === area.area_id) || // Device ID -> Area ID\n              // Bereichsname im Namen\n              (() => {\n                const areaNames = [area.name?.toLowerCase(), area.area_id?.toLowerCase()].filter(Boolean);\n                const entityName = e.entity_id.toLowerCase();\n                const friendlyName = (e.attributes?.friendly_name || '').toLowerCase();\n                return areaNames.some(an => an && (entityName.includes(an) || friendlyName.includes(an)));\n              })();\n\n            return (nameMatch || specialMatch) && areaMatch;\n          });\n\n          // Kombiniere und dedupliziere die Ergebnisse\n          const relevantEntities = Array.from(new Set([...matchingByClass, ...matchingByKeyword]));\n\n          // Sortiere nach friendly_name oder entity_id\n          relevantEntities.sort((a: any, b: any) => \n            (a.attributes?.friendly_name || a.entity_id)\n            .localeCompare(b.attributes?.friendly_name || b.entity_id)\n          );\n\n          const selected = this.config.overrides?.[area.area_id]?.[type] || '';\n\n          return html`\n            <li>\n              <div class=\"sensor-row ${type === 'target' ? 'target-row' : ''}\">\n                <span class=\"sensor-label\">\n                  ${type === 'target' ? 'Zieltemperatur-Sensor' : \n                  type === 'heating' ? 'Heizung' :\n                  type === 'heating_level' ? 'Heizleistung' :\n                  type}:\n                </span>\n                <div class=\"sensor-select\">\n                  <ha-entity-combo-box\n                    .hass=${this.hass}\n                    .value=${selected || ''}\n                    .includeDomains=${['sensor','binary_sensor','input_number','number','climate','device_tracker','person','input_boolean']}\n                    .area=${area.area_id}\n                    @value-changed=${(e: CustomEvent) => this._onAreaSensorChange(area.area_id, type, e.detail.value)}\n                  ></ha-entity-combo-box>\n                  ${type === 'target' ? html`\n                  <div class=\"help-text\">\n                  Wählen Sie einen Sensor für die Soll-Temperatur aus. Wenn leer, wird der Standardwert (${this.config.default_target || 21}°C) verwendet.\n                  </div>\n                  ` : ''}\n                </div>\n              </div>\n            </li>\n            `;\n          })}\n        </ul>\n        </div>\n      `})}\n      </div>\n\n      <!-- Missing Sensors per Area -->\n      <div style=\"margin-top:1em;\">\n      <b>Fehlende Sensoren pro Bereich:</b>\n      <ul>\n        ${missingSensorsPerArea.map(a => html`<li><b>${a.area.name}</b>: ${a.missing.length === 0 ? 'Alle gefunden' : a.missing.join(', ')}</li>`)}\n      </ul>\n      </div>\n\n      <!-- Notifications & High Threshold -->\n      <div style=\"margin-top:1em;\">\n      <label><input type=\"checkbox\" .checked=${this.notify} @change=${this.handleNotifyChange} /> Regel-Treffer als Home Assistant Notification anzeigen</label>\n      </div>\n      <div style=\"margin-top:1em;\">\n      <label>High Threshold: <input type=\"number\" .value=${this.highThreshold} @input=${this.handleThresholdChange} /></label>\n      </div>\n    `;\n  }\n}\n"]}