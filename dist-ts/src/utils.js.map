{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../src/utils.ts"],"names":[],"mappings":"AAAA,MAAM,UAAU,mBAAmB,CAAC,MAAa,EAAE,MAAc;IAC/D,8EAA8E;IAC9E,MAAM,IAAI,GAAG,CAAC,CAAS,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,WAAW,EAAE,CAAC,IAAI,EAAE,CAAC;IAE3D,0CAA0C;IAC1C,OAAO,CAAC,GAAG,CAAC,4CAA4C,MAAM,GAAG,CAAC,CAAC;IAEnE,kCAAkC;IAClC,MAAM,QAAQ,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,EAAE;QAClC,MAAM,MAAM,GAAG,IAAI,CAAC,EAAE,CAAC,UAAU,EAAE,OAAO,CAAC,CAAC;QAC5C,MAAM,UAAU,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC;QAEhC,mCAAmC;QACnC,IAAI,EAAE,CAAC,SAAS,IAAI,EAAE,CAAC,UAAU,EAAE,OAAO,EAAE,CAAC;YAC3C,OAAO,CAAC,GAAG,CAAC,yCAAyC,EAAE,CAAC,SAAS,eAAe,EAAE,CAAC,UAAU,CAAC,OAAO,mBAAmB,MAAM,eAAe,UAAU,GAAG,CAAC,CAAC;QAC9J,CAAC;QAED,OAAO,MAAM,KAAK,UAAU,CAAC;IAC/B,CAAC,CAAC,CAAC;IAEH,oBAAoB;IACpB,OAAO,CAAC,GAAG,CAAC,+BAA+B,QAAQ,CAAC,MAAM,sBAAsB,MAAM,IAAI,CAAC,CAAC;IAC5F,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC;IAEvD,OAAO,QAAQ,CAAC;AAClB,CAAC","sourcesContent":["export function filterSensorsByArea(states: any[], areaId: string) {\n  // Vergleiche areaId und st.attributes.area_id getrimmt und in Kleinbuchstaben\n  const norm = (v: string) => (v || '').toLowerCase().trim();\n  \n  // Debug logging to check area_id matching\n  console.log(`[filterSensorsByArea] Looking for area: '${areaId}'`);\n  \n  // First find any matching sensors\n  const filtered = states.filter(st => {\n    const stArea = norm(st.attributes?.area_id);\n    const searchArea = norm(areaId);\n    \n    // Log each potential match attempt\n    if (st.entity_id && st.attributes?.area_id) {\n      console.log(`[filterSensorsByArea] Checking entity ${st.entity_id} with area '${st.attributes.area_id}' (normalized: '${stArea}') against '${searchArea}'`);\n    }\n    \n    return stArea === searchArea;\n  });\n  \n  // Log what we found\n  console.log(`[filterSensorsByArea] Found ${filtered.length} sensors for area '${areaId}':`);\n  filtered.forEach(s => console.log(`- ${s.entity_id}`));\n  \n  return filtered;\n}"]}